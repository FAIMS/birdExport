

attach database 'shape.sqlite3' as shape;


DROP VIEW IF EXISTS parentchild;", null
CREATE VIEW parentchild AS 
SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb, child.aenttypename as childaenttypename
  FROM (SELECT uuid, participatesverb, aenttypename, relationshipid
          FROM latestnondeletedaentreln 
          JOIN relationship USING (relationshipid) 
          JOIN latestnondeletedarchent USING (uuid) 
          JOIN aenttype USING (aenttypeid)) parent 
  JOIN (SELECT uuid, relationshipid, participatesverb, aenttypename 
          FROM latestnondeletedaentreln 
          JOIN relationship USING (relationshipid) 
          JOIN latestnondeletedarchent USING (uuid) 
          JOIN aenttype USING (aenttypeid)) child 
    ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid);

drop view latestNonDeletedArchEntFormattedIdentifiers;
CREATE VIEW latestNonDeletedArchEntFormattedIdentifiers as 
select uuid, aenttypeid, aenttypename, group_concat(response, '') as response, null as deleted 
from ( 
  select uuid, aenttypeid, aenttypename, group_concat(format(formatstring, vocabname, measure, freetext, certainty), appendcharacterstring) as response, null as deleted, aentcountorder 
  from ( 
    select uuid, aenttypeid, aenttypename, replace(replace(formatstring, char(10),''), char(13),'') as formatstring, vocabname, replace(replace(measure, char(13), '\r'), char(10), '\n') as measure, replace(replace(freetext, char(13), '\r'), char(10), '\n') as freetext, certainty, appendcharacterstring, null as deleted, aentcountorder, vocabcountorder, attributeid 
    from latestNonDeletedArchent 
      JOIN aenttype using (aenttypeid) 
      JOIN (select * from idealaent where isIdentifier='true') using (aenttypeid) 
      join attributekey  using (attributeid) 
      left outer join latestNonDeletedAentValue using (uuid, attributeid) 
      left outer join vocabulary using (attributeid, vocabid) 
    order by uuid, aentcountorder, vocabcountorder 
  ) 
  group by uuid, attributeid 
  having response is not null 
  order by uuid, aentcountorder) 
group by uuid 
order by uuid;



drop view if exists truncFormattedIdentifier;
create view truncFormattedIdentifier as 
  select uuid, format(trim(formatstring,'-'), null, measure, freetext, certainty) as response 
                                from latestnondeletedaentvalue join attributekey using (attributeid)
                                where attributename in ('Nest Nest ID', 'Egg ID', 'Chick Chick ID');

drop view if exists tasklist;
create view tasklist as 
select date(measure, 'localtime', '+1 day') as dayDue, response as taskName, parentchild.parentuuid as nestuuid, 2 as aenttypenameorder 
                        from latestnondeletedaentvalue
                        join truncFormattedIdentifier as task using (uuid)
                        join attributekey using (attributeid)
                        join parentchild on (parentchild.childuuid = task.uuid)
                       where attributename = 'Egg timestamp'
                       union
            select date(measure, 'localtime', '+1 day') as dayDue, response as taskName, parentchild.parentuuid as nestuuid, 3 as aenttypenameorder 
                        from latestnondeletedaentvalue
                        join truncFormattedIdentifier as task using (uuid)
                        join attributekey using (attributeid)
                        join parentchild on (parentchild.childuuid = task.uuid)
                       where attributename = 'Chick timestamp'                      
                       union
            select date(measure, 'localtime', '+1 day') as dayDue, response as taskName, uuid as nestuuid, 1 as aenttypenameorder 
                        from latestnondeletedaentvalue
                        join truncFormattedIdentifier as task using (uuid)
                        join attributekey using (attributeid)
                       where attributename = 'Nest Completed at'
                       union                       
                      select date(measure, 'localtime', '+7 day') as dayDue, response as taskName, parentchild.parentuuid as nestuuid, 2 as aenttypenameorder 
                        from latestnondeletedaentvalue
                        join truncFormattedIdentifier as task using (uuid)
                        join attributekey using (attributeid)
                        join parentchild on (parentchild.childuuid = task.uuid)
                       where attributename = 'Chick timestamp'
                       union
                      select date(measure, 'localtime', '+12 day') as deayDue, response as taskName, parentchild.parentuuid as nestuuid, 2 as aenttypenameorder 
                        from latestnondeletedaentvalue
                        join truncFormattedIdentifier as task using (uuid)
                        join attributekey using (attributeid)
                        join parentchild on (parentchild.childuuid = task.uuid)
                       where attributename = 'Chick timestamp'
                       order by taskName desc, aenttypenameorder, dayDue;


select dayDue, response, tasks
  from (select dayDue, 'Check: '||taskName as tasks, nestuuid, aenttypenameorder, parentuuid as uuid
          from taskList
          JOIN parentchild on (parentchild.childuuid = nestuuid)
     where parentchild.parentaenttypename = 'Box'
       and dayDue >= date(current_date, '-2 day')         
          ) JOIN (select uuid, aenttypeid, aenttypename, group_concat(response, '') as response, null as deleted 
from ( 
  select uuid, aenttypeid, aenttypename, group_concat(format(formatstring, vocabname, measure, freetext, certainty), appendcharacterstring) as response, null as deleted, aentcountorder 
  from ( 
    select uuid, aenttypeid, aenttypename, replace(replace(formatstring, char(10),''), char(13),'') as formatstring, vocabname, replace(replace(measure, char(13), '\r'), char(10), '\n') as measure, replace(replace(freetext, char(13), '\r'), char(10), '\n') as freetext, certainty, appendcharacterstring, null as deleted, aentcountorder, vocabcountorder, attributeid 
    from latestNonDeletedArchent 
      JOIN aenttype using (aenttypeid) 
      JOIN (select * from idealaent where isIdentifier='true') using (aenttypeid) 
      join attributekey  using (attributeid) 
      left outer join latestNonDeletedAentValue using (uuid, attributeid) 
      left outer join (select vocabid, attributeid, coalesce(val, vocabname) as devocab, vocabcountorder, vocabname
                                  from vocabulary 
                                  left outer join shape.keyval on (vocabulary.vocabname = keyval.key))
                                  using (attributeid, vocabid)     order by uuid, aentcountorder, vocabcountorder 
  ) 
  group by uuid, attributeid 
  having response is not null 
  order by uuid, aentcountorder) 
group by uuid 
order by uuid) USING (uuid)
  order by dayDue, response, aenttypenameorder, tasks
  ;




detach database shape;
